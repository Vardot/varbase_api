<?php

/**
 * @file
 * Contains varbase_api.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\ViewEntityInterface;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;

/**
 * Implements hook_entity_insert().
 */
function varbase_api_entity_insert(EntityInterface $entity) {
  $entity_json_opration = Drupal::config('varbase_api.settings')->get('entity_json');
  $entity_type_bundle = $entity->getEntityType()->getBundleOf();

  if ($entity_type_bundle && $entity_json_opration) {
    Drupal::service('router.builder')->rebuild();
    Drupal::service('router.route_provider')->reset();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function varbase_api_view_presave(ViewEntityInterface $view) {
  if (Drupal::isConfigSyncing()) {
    return;
  }
  elseif ($view->id() === 'content' && $view->isNew()) {
    $display = &$view->getDisplay('default');

    // If the Operations field's 'Include destination' switch is enabled, it
    // will force every operation to have the 'destination' query parameter,
    // which breaks JSON API 2.0, causing the 'View JSON' operation to throw a
    // BadRequestHttpException.
    if (isset($display['display_options']['fields']['operations']['destination'])) {
      $display['display_options']['fields']['operations']['destination'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function varbase_api_entity_operation(EntityInterface $entity) {
  $operations = [];

  if (\Drupal::currentUser()->hasPermission('access view json entity operation')
    && \Drupal::config('varbase_api.settings')->get('entity_json')
    && varbase_api_is_jsonapi_resource_config_enabled($entity)) {

    $view_json_operation_url = varbase_api_get_view_json_operation_url($entity);
    if (isset($view_json_operation_url) && $view_json_operation_url !== '') {
      $operations['view-json'] = [
        'title' => t('View JSON'),
        'url' => $view_json_operation_url,
        'weight' => 90,
        'query' => ['destination' => []],
      ];
    }
  }

  if (\Drupal::currentUser()->hasPermission('access view api docs entity operation')
    && \Drupal::currentUser()->hasPermission('access openapi api docs')
    && \Drupal::config('varbase_api.settings')->get('bundle_docs')
    && varbase_api_is_jsonapi_resource_config_enabled($entity)) {

    $view_api_docs_operation_url = varbase_api_get_view_api_docs_operation_url($entity);
    if (isset($view_api_docs_operation_url) && $view_api_docs_operation_url !== '') {
      $operations['api-documentation'] = [
        'title' => t('View API Docs'),
        'url' => $view_api_docs_operation_url,
        'weight' => 95,
        'query' => ['destination' => []],
      ];
    }
  }

  return $operations;
}

/**
 * Check if the JSON:API resource config was enabled for this entity.
 */
function varbase_api_is_jsonapi_resource_config_enabled(EntityInterface $entity) {
  // Get the JSON:API resource type.
  $resource_config_id = sprintf('%s--%s', $entity->getEntityTypeId(), $entity->bundle());
  $resource_type_existing_entity = \Drupal::service('jsonapi.resource_type.repository')->getByTypeName($resource_config_id);

  if (isset($resource_type_existing_entity)) {
    $jsonapi_resource_config_disabled = \Drupal::configFactory()->get('jsonapi_extras.jsonapi_resource_config.' . $resource_config_id)->get('disabled');
    if (!$jsonapi_resource_config_disabled) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get the View JSON:API operation URL for this entity.
 */
function varbase_api_get_view_json_operation_url(EntityInterface $entity) {
  $view_json_operation_url = '';

  $uuid = $entity->uuid();
  $entity_type_id = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  /** @var \Drupal\jsonapi\ResourceType\ResourceType $resource_type */
  $resource_type = \Drupal::service('jsonapi.resource_type.repository')
    ->get(
      $entity_type_id,
      ($bundle) ? $bundle : ''
    );

  if ($uuid && $resource_type) {

    // JSON API routes are built dynamically per entity bundle. If for whatever
    // reason the appropriate route does not exist yet, fail silently.
    // @see varbase_api_entity_insert().
    try {
      $route_name = 'jsonapi.' . $resource_type->getTypeName() . '.individual';
      Drupal::service('router.route_provider')->getRouteByName($route_name);
      $route_parameters = [
        'entity' => $uuid,
      ];
      $view_json_operation_url = Url::fromRoute($route_name, $route_parameters);
    }
    catch (RouteNotFoundException $e) {
      // No worries. The route will probably be built soon, most likely during
      // the next general cache rebuild.
    }
  }

  return $view_json_operation_url;
}

/**
 * Get the View API Docs operation URL for this entity.
 */
function varbase_api_get_view_api_docs_operation_url(EntityInterface $entity) {
  $view_api_docs_operation_url = '';

  $entity_type_id = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $entity_type_label = \Drupal::entityTypeManager()->getDefinition($entity_type_id)->getLabel();
  $bundle_type_id = $entity->getEntityType()->getBundleEntityType();

  $fragment = '';
  if (empty($bundle_type_id)) {
    $fragment = str_replace(' ', '-', sprintf('tag/%s', $entity_type_label));
  }
  else {
    $bundle_type_label = \Drupal::entityTypeManager()->getStorage($bundle_type_id)->load($bundle)->label();
    $fragment = str_replace(' ', '-', sprintf('tag/%s-%s', $entity_type_label, $bundle_type_label));
  }

  $route_parameters = [
    'openapi_ui' => 'redoc',
    // 'openapi_ui' => 'swagger',
    'openapi_generator' => 'jsonapi',
  ];

  try {
    $view_api_docs_operation_url = Url::fromRoute('openapi.documentation', $route_parameters, ['fragment' => $fragment]);
  }
  catch (RouteNotFoundException $e) {
    // No worries. The route will probably be built soon, most likely during
    // the next general cache rebuild.
  }

  return $view_api_docs_operation_url;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function varbase_api_form_oauth2_token_settings_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // The key generation form provided by Simple OAuth doesn't generate unique
  // key names (or allow the user to override the names) and doesn't allow the
  // user to specify the location of the OpenSSL config file. Specifically, the
  // fact that the names are always the same could cause problems on systems
  // where the home directory stores keys for more than one application. So hide
  // the link to that form and users can continue to use the one provided by
  // Varbase API.
  $form['actions']['generate']['keys']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_create().
 */
function varbase_api_entity_bundle_create($entity_type_id, $bundle) {
  $auto_enabled_entity_types = (array) \Drupal::config('varbase_api.settings')->get('auto_enabled_entity_types');

  if (isset($auto_enabled_entity_types)
    && !in_array($entity_type_id, $auto_enabled_entity_types)) {

    // Get the JSON:API resource type.
    $resource_config_id = sprintf('%s--%s', $entity_type_id, $bundle);
    $existing_entity = \Drupal::service('jsonapi.resource_type.repository')->getByTypeName($resource_config_id);

    if (isset($existing_entity)) {

      JsonapiResourceConfig::create([
        'id' => $resource_config_id,
        'disabled' => FALSE,
        'path' => $entity_type_id . '/' . $bundle,
        'resourceType' => $resource_config_id,
        'resourceFields' => [],
      ])->save();

      $config_factory = \Drupal::configFactory()->getEditable('jsonapi_extras.jsonapi_resource_config.' . $resource_config_id);

      if (isset($config_factory)) {
        $config_factory->set('disabled', TRUE)->save();
        \Drupal::service('jsonapi.resource_type.repository')->reset();
        $logger_values = [
          '@entity_type_id' => $entity_type_id,
          '@bundle' => $bundle,
        ];
        \Drupal::logger('varbase_api')->info('Disabled JSON:API Endpoint for Entity Type: @entity_type_id Bundle: @bundle', $logger_values);
      }
    }
  }
}
